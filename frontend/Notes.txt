Angular CLI (Command Line Interface) => build framework
npm => node package manager => like Maven for Java
Node.js => back-end JavaScript runtime environment that executes JavaScript code outside of a web browser
ng lint => checks quality of code , coding standards
ng serve => local application server
ng => stands for aNGular
ng build => dist folder like target in a maven java app

tests are called specifications
Karma => test runner
Jasmine => testing framework unit testing
Protractor => runs e2e end to end tests uses Selenium

Component => is made out of <html> <css> and <js>
Decorator => very similar to Java's Annotation
We mark Components with @Component
    Component Decorator attributes:
        selector => name of the component
        templateUrl => url of the html template
        styleUrls => urls of the style file i.e .css
        Attributes are wrapped in an object {key:value, key:value}

{{name}} => data binding | interpolation

ng generate component <name> => ng will add "component" at the end of the name
    it will create a new folder in src/app , generate html,css,spec and component
    files it will also add the new component to the list of components
    in the app.module.ts file @NgModule
Every Angular Component has to be associated with an Angular Module (@NgModule)

importing classes
import {name} from 'relative path to file containing the class'
i.e import { AppComponent } from '../app.component' => no extension o file name

Module is a collection of basic building blocks like Components, Directives or Services

Class declaration:
export class SomeClass implements OnInit

export => make the class available outside of the module
    kind of like a public access modifier in Java
implements is a TypeScript feature

We declare type after : i.e message : string = 'some text'
We declare a constructor by creating a method constructor() not the name of the class

Event binding => <button (click) = handleLogin()>
click => name of the event
handleLogin() => method to execute when event is triggered

In JS to access member variables we have use this.variable it's not optional like in Java
[()] => banana in a box
Interpolation will get us a value from the component value={{username}}
To have the value read and write to the component we use
    [(ngModel)]="username" => two way data binding -> angular directive
    It is a shortcut for two things :
    [ngModel] = 'object.field' => property binding
    (ngModelChange) = 'object.field = $event' => event binding
        when the value changes , update the value

<small *ngIf="invalidLogin"> ng attribute => renders html element if true

Routing => we set up all the routing paths in the app-routing.module.ts as an array
    <router-outlet></router-outlet> => html tag to show contents of the router path

{path: '**', component: ErrorComponent} => '**' means any other path
    ! The order is important ** error route needs to be last

Set intellij to always use single quotes in generated code :
    Setting > Cody Style > TypeScript > Punctuation

Dependency Injection => is build-in in Angular
    constructor(router:Router) => when we declare a variable in the constructor
    Angular will inject the component & we also need an import
    Whenever we pass an argument to the constructor it will be available as
    a member of the class

Path with a parameter:
    We declare parameter in the app-routing.module.ts
        {path: 'welcome/:name', component: WelcomeComponent}
    We pass the parameter to the navigate method
        this.router.navigate(['welcome', this.username])
    We read the parameter by injecting ActivatedRoute on the destination component
        constructor(private route: ActivatedRoute)
    and accessing it from the now member variable of the injected ActivatedRoute
        this.name = this.route.snapshot.params.name
    To interpolate it in to the view we assign it to the local variable

<a routerLink="/todos">here</a> => anchor tags referencing other pages/components
    withing Angular app need to use routerLink. There is no todos.html only a
    component. If we use href the whole page will reload.

{{targetDate | date}} <| date> is a simple function that converts one value into another
    in this case it formats a date according to local values
{{targetDate | date | uppercase}} pipes are used inside template expressions

Angular Application -> Angular Modules @ngModel -> Angular Components @Component
Component ->  Template .html & Style .css & Code .ts

To use an external method call in the component.html component we need to first inject the class
    containing the method in to the constructor of the corresponding component.ts file
    then we refer to the method in the ng directive by String -> AAAAaaaaaaa
    We can also negate with ! also in the string. Why not using interpolation ?

Important gotcha! ngOnInit() is called only once at the initialization of the component

intelliJ right Click -> Find Usages | Alt+F7

Angular Service => just a .ts file -> Singleton -> used to organize and share business
    logic, models or data with different Angular components

RouteGuardService => implements CanActivate
    In the app-routing.module we add a property canActivate passing in the class.
    canActivate takes an array as argument => we can have multiple RouteGuards
    {path: 'welcome/:name', component: WelcomeComponent, canActivate: [RouteGuardService]}

Web Service => application that provides service that other applications can use
    program to program, not platform dependant
W3C Definition :
    Software system designed to support interoperable machine-to-machine
    interaction over a network.

Web App => usually the end user is a human and the program has a GUI

Service Definition is a contract between service provider and service consumer
    Req/Res format && structure && location -> endpoint

Transport => the means of communication, mechanism i.e HTTP or MQ

Consuming a Rest Resource:
    Inject HttpClient in to the Service class
    import {HttpClientModule} from '@angular/common/http'; => app.module.ts
    We call the appropriate method on HttpClient
        this.http.get('http://localhost:8080/hello-world-bean');
    Observable is returned.
    We need to call the subscribe method on the Observable
        to execute the request.

Browser Error :
XMLHttpRequest cannot load localhost:4201/ticker. Cross origin requests
    are only supported for protocol schemes: http, data, chrome, chrome-extension,
    https.
    => most likely missing protocol in the ULR i.e http://

Browser Error:
Access to XMLHttpRequest at 'http://localhost:8080/hello-world0bean'
    from origin 'http://localhost:4200' has been blocked by CORS policy:
    No 'Access-Control-Allow-Origin' header is present on the requested resource.
    => double check your request URL for typos!

Empty strings are evaluated as false in Angular
    *ngIf="welcomeMessageFromService"> where welcomeMessage is a field of type
        string initialized to ''

To request a resource with a parameter we can append an argument to the request URL by surrounding the URL
    by back tick character instead of a single quote and using the dollar sign i.e:
    executeHelloWorldBeanServiceWithPathVariable(name: string): Observable<HelloWorldBean> {
        return this.http.get<HelloWorldBean>(`http://localhost:8080/hello-bean-name/${name}`);
      }

REST | ResponseEntity => use to return a status for the Resource request i.e
    @DeleteMapping("/users/{username}/todos/{id}")
        public ResponseEntity<Void> deleteTodo(@PathVariable String username, @PathVariable long id){
            Todo todo = todoHardcodedService.deleteById(id);
            if (todo == null) {
                return ResponseEntity.noContent().build();
            }

            return ResponseEntity.notFound().build();
        }

Restlet aka Talend => Rest Api tester, very similar to Postman
    but works as chrome plugin

For the POST mapping (Creating a new resource) we return a URL of the newly
    created resource.
    We use a helper class ServletUriComponentsBuilder i.e :
         URI uri = ServletUriComponentsBuilder.fromCurrentRequest().path("/{id}")
                  .buildAndExpand(todoSaved.getId()).toUri();

Forms with Angular => we mark the button calling the method as type="submit" and instead of assigning a (click)
    event to the button we assign a (ngSubmit) event to the <form> tag
    i.e <form (ngSubmit)="saveTodo()"> && <button type="submit"> | <button (click)="saveTodo()>

#name => template variable


