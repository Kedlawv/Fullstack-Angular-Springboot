Angular CLI (Command Line Interface) => build framework
npm => node package manager => like Maven for Java
Node.js => back-end JavaScript runtime environment that executes JavaScript code outside of a web browser
ng lint => checks quality of code , coding standards
ng serve => local application server
ng => stands for aNGular
ng build => dist folder like target in a maven java app

tests are called specifications
Karma => test runner
Jasmine => testing framework unit testing
Protractor => runs e2e end to end tests uses Selenium

Component => is made out of <html> <css> and <js>
Decorator => very similar to Java's Annotation
We mark Components with @Component
    Component Decorator attributes:
        selector => name of the component
        templateUrl => url of the html template
        styleUrls => urls of the style file i.e .css
        Attributes are wrapped in an object {key:value, key:value}

{{name}} => data binding | interpolation

ng generate component <name> => ng will add "component" at the end of the name
    it will create a new folder in src/app , generate html,css,spec and component
    files it will also add the new component to the list of components
    in the app.module.ts file @NgModule
Every Angular Component has to be associated with an Angular Module (@NgModule)

importing classes
import {name} from 'relative path to file containing the class'
i.e import { AppComponent } from '../app.component' => no extension o file name

Module is a collection of basic building blocks like Components, Directives or Services

Class declaration:
export class SomeClass implements OnInit

export => make the class available outside of the module
    kind of like a public access modifier in Java
implements is a TypeScript feature

We declare type after : i.e message : string = 'some text'
We declare a constructor by creating a method constructor() not the name of the class

Event binding => <button (click) = handleLogin()>
click => name of the event
handleLogin() => method to execute when event is triggered

In JS to access member variables we have use this.variable it's not optional like in Java
[()] => banana in a box
Interpolation will get us a value from the component value={{username}}
To have the value read and write to the component we use
    [(ngModel)]="username" => two way data binding -> angular directive

<small *ngIf="invalidLogin"> ng attribute => renders html element if true

Routing => we set up all the routing paths in the app-routing.module.ts as an array
    <router-outlet></router-outlet> => html tag to show contents of the router path

{path: '**', component: ErrorComponent} => '**' means any other path
    ! The order is important ** error route needs to be last

Set intellij to always use single quotes in generated code :
    Setting > Cody Style > TypeScript > Punctuation

Dependency Injection => is build-in in Angular
    constructor(router:Router) => when we declare a variable in the constructor
    Angular will inject the component & we also need an import
    Whenever we pass an argument to the constructor it will be available as
    a member of the class

Path with a parameter:
    We declare parameter in the app-routing.module.ts
        {path: 'welcome/:name', component: WelcomeComponent}
    We pass the parameter to the navigate method
        this.router.navigate(['welcome', this.username])
    We read the parameter by injecting ActivatedRoute on the destination component
        constructor(private route: ActivatedRoute)
    and accessing it from the now member variable of the injected ActivatedRoute
        this.name = this.route.snapshot.params.name
    To interpolate it in to the view we assign it to the local variable

<a routerLink="/todos">here</a> => anchor tags referencing other pages/components
    withing Angular app need to use routerLink. There is no todos.html only a
    component.

{{targetDate | date}} <| date> is a simple function that converts one value into another
    in this case it formats a date according to local values
{{targetDate | date | uppercase}} pipes are used inside template expressions